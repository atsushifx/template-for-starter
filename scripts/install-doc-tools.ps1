# src: /scripts/install-doc-tools.ps1
# @(#) : „Éâ„Ç≠„É•„É°„É≥„Éà„É´„Éº„É´„Ç§„É≥„Çπ„Éà„Éº„É´„Çπ„ÇØ„É™„Éó„Éà
#
# Copyright (c) 2025 Furukawa Atsushi <atsushifx@gmail.com>
# Released under the MIT License.

<#
.SYNOPSIS
    Install textlint, markdownlint, and cspell for writers, and copy config files

.DESCRIPTION
    - Installs common textlint rules, markdownlint-cli2, and cspell
    - Copies .textlintrc.yaml, .markdownlint.yaml, .textlint/, .vscode/ from specified templates directory

.NOTES
    @Version  1.4.2
    @Author   atsushifx <https://github.com/atsushifx>
    @Since    2025-06-12
    @License  MIT https://opensource.org/licenses/MIT
#>

#region Parameters
Param (
    [string]$TemplateDir = "./templates",
    [string]$DestinationDir = "."
)
#endregion

#region Setup
Set-StrictMode -Version Latest

. "$PSScriptRoot/common/init.ps1"
. "$SCRIPT_ROOT/libs/AgInstaller.ps1"
#endregion

#region Functions
function Copy-LinterConfigs {
<#
.SYNOPSIS
    ÊåáÂÆö„Åï„Çå„ÅüË®≠ÂÆö„Éï„Ç°„Ç§„É´„Éª„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí„ÉÜ„É≥„Éó„É¨„Éº„Éà„Åã„Çâ `DestinationDir/configs/` „Å´„Ç≥„Éî„Éº„Åó„Åæ„Åô„ÄÇ
    `.vscode` „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ„ÅøÁâπ‰æã„Å®„Åó„Å¶ `DestinationDir/.vscode` „Å´„Ç≥„Éî„Éº„Åï„Çå„Åæ„Åô„ÄÇ

.PARAMETER Items
    „Ç≥„Éî„ÉºÂØæË±°„ÅÆ„Éï„Ç°„Ç§„É´Âêç„ÇÑ„Éá„Ç£„É¨„ÇØ„Éà„É™ÂêçÔºà„Éë„Ç§„Éó/ÂºïÊï∞ÂèØÔºâ

.PARAMETER TemplateDir
    „ÉÜ„É≥„Éó„É¨„Éº„ÉàÊ†ºÁ¥ç„Éá„Ç£„É¨„ÇØ„Éà„É™

.PARAMETER DestinationDir
    „Ç≥„Éî„ÉºÂÖà„É´„Éº„ÉàÔºà`.vscode`‰ª•Â§ñ„ÅØ `/configs` ÈÖç‰∏ãÔºâ
#>
    [CmdletBinding()]
    param (
        [Parameter(ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
        [string[]]$Items,

        [string]$TemplateDir = "./templates",
        [string]$DestinationDir = "."
    )

    begin {
        $targets = @()
    }

    process {
        foreach ($i in $Items) {
            if ($i -and ($i -notmatch '^\s*#')) {
                $targets += $i
            }
        }
    }

    end {
        # create configs directory if needed
        $configPath = Join-Path $DestinationDir "configs"
        if (-not (Test-Path $configPath)) {
            New-Item -Path $configPath -ItemType Directory | Out-Null
            Write-Host "üìÅ Created configs directory: $configPath"
        }

        # Copy configs
        foreach ($item in $targets) {
            $src = Join-Path $TemplateDir $item

            $dstBase = if ($item -ieq ".vscode") {
                $DestinationDir  # Áõ¥‰∏ã„Å´„Ç≥„Éî„Éº
            } else {
                Join-Path $DestinationDir "configs"
            }

            $dst = Join-Path $dstBase $item

            if (Test-Path $src) {
                if (-not (Test-Path $dst)) {
                    if ((Get-Item $src).PSIsContainer) {
                        Write-Host "üìÅ Copying directory: $item ‚Üí $dst"
                        robocopy $src $dst /E /NFL /NDL /NJH /NJS /NC /NS | Out-Null
                        Write-Host "‚úÖ Directory copied: $item"
                    } else {
                        Copy-Item $src -Destination $dst
                        Write-Host "üìù Copied file: $item ‚Üí $dst"
                    }
                } else {
                    Write-Host "üîÅ Skipped (exists): $item"
                }
            } else {
                Write-Warning "‚ö†Ô∏è Not found in templates: $item"
            }
        }
    }
}
#endregion

#region Main
function main {
    Write-Host "üì¶ Installing writer tooling..."

    @(
        # textlint & rules
        "textlint",
        "textlint-filter-rule-allowlist",
        "textlint-filter-rule-comments",
        "textlint-rule-preset-ja-technical-writing",
        "textlint-rule-preset-ja-spacing",
        "textlint-rule-ja-no-orthographic-variants",
        "@textlint-ja/textlint-rule-no-synonyms",
        "sudachi-synonyms-dictionary",
        "@textlint-ja/textlint-rule-morpheme-match",
        "textlint-rule-ja-hiraku",
        "textlint-rule-no-mixed-zenkaku-and-hankaku-alphabet",
        "textlint-rule-common-misspellings",
        "@proofdict/textlint-rule-proofdict",
        "textlint-rule-prh",

        # markdown lint
        "markdownlint-cli2",

        # spell checker
        "cspell"
    ) | Install-PnpmPackages

    if (Test-Path $TemplateDir) {
        @(
            # textlint settings
            ".textlintrc.yaml",
            ".textlint",

            # markdownlint
            ".markdownlint.yaml",

            # cSpell
            ".vscode"
        ) | Copy-LinterConfigs -TemplateDir $TemplateDir -DestinationDir $DestinationDir
    } else {
        Write-Host "‚ö†Ô∏è Template directory not found: $TemplateDir. Skipping config copy."
    }

    Write-Host "‚úÖ Writer environment setup completed." -ForegroundColor Green
}
#endregion

main
